generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  image       String
  category    Category? @relation(fields: [category_id], references: [id])
  category_id Int

  @@index([category_id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  products    Product[]
}

model Account {
  accountId       Int        @id @default(autoincrement())
  accountCuid     String     @unique @default(cuid()) @db.VarChar(32)
  accountName     String     @db.VarChar(255)
  referenceNumber String?    @db.VarChar(128)
  website         String?    @db.VarChar(255)
  phone           String?    @db.VarChar(32)
  address1        String?    @db.VarChar(255)
  address2        String?    @db.VarChar(255)
  city            String?    @db.VarChar(255)
  region          String?    @db.VarChar(255)
  postalCode      String?    @db.VarChar(32)
  emailAddress    String?    @db.VarChar(255)
  contact         String?    @db.VarChar(255)
  country         String?    @db.VarChar(128)
  accountStatus   Int?       @default(1) @db.TinyInt
  dateCreated     DateTime?  @default(now())
  dateUpdated     DateTime?  @updatedAt
  marginRate      Decimal?   @db.Decimal(4, 2)
  shipments       Shipment[]
}

model Shipment {
  shipmentId                Int                   @id @default(autoincrement())
  shipmentCuid              String?               @unique @default(cuid()) @db.VarChar(32)
  shipmentName              String                @db.VarChar(255)
  accountCuid               String?               @db.VarChar(32)
  accounts                  Account?              @relation(fields: [accountCuid], references: [accountCuid]) //establish foreign key relationship between accounts and users
  createdByAccountUserCuid  String?               @db.VarChar(32)
  //createdByAccountUserCuidFk             AccountUsers    @relation(fields: [createdByAccountUserCuid], references: [accountUserId]) //establish foreign key relationship between accounts and users
  shipmentDateAdded         DateTime?             @default(now())
  shipmentDateUpdated       DateTime?             @updatedAt
  trackingNumber            String?               @db.VarChar(255)
  moNumber                  String?               @db.VarChar(255)
  houseBillNumber           String?               @db.VarChar(255)
  trackingUrl               String?               @db.VarChar(255)
  shipmentActive            Int?                  @db.TinyInt
  shipmentStatus            Int?                  @db.TinyInt
  shipmentPaid              Int?                  @db.TinyInt
  shipmentCustomerRate      Decimal?              @default(0) @db.Decimal(5, 2)
  internalRate              Decimal?              @default(0) @db.Decimal(5, 2)
  shipmentCustomerTotalCost Decimal?              @default(0) @db.Decimal(8, 2)
  internalTotalCost         Decimal?              @default(0) @db.Decimal(8, 2)
  totalWeight               Decimal?              @default(0) @db.Decimal(12, 2)
  totalDimension            Decimal?              @default(0) @db.Decimal(12, 2)
  dateCreated               DateTime?             @default(now())
  dateUpdated               DateTime?             @updatedAt
  //equipmentTypeCuid         String?               @db.VarChar(32)
  shipmentNote              String?               @db.Text
  shipmentTimeZone          String?               @db.Char(3)
  //equipmentTypes            EquipmentType?      @relation(fields: [equipmentTypeCuid], references: [equipmentTypeCuid])
  shipmentLoads             ShipmentLoad[]
  shipmentRoutes            ShipmentRoute[]
  shipmentEquipments        ShipmentEquipment[]
  shipmentAccessorials      ShipmentAccessorial[]
  shipmentLocations         ShipmentLocation[]
}

model ShipmentAccessorial {
  shipmentAccessorialId     Int          @id @default(autoincrement())
  shipmentAccessorialCuid   String?      @unique @default(cuid()) @db.VarChar(32)
  shipmentCuid              String?      @db.VarChar(255)
  shipments                 Shipment?    @relation(fields: [shipmentCuid], references: [shipmentCuid]) //establish foreign key relationship between accounts and users
  accessorialCuid           String?      @db.VarChar(255)
  accessorials              Accessorial? @relation(fields: [accessorialCuid], references: [accessorialCuid]) //establish foreign key relationship between accounts and users
  shipmentAccessorialActive Int?         @default(1) @db.TinyInt
}

model ShipmentEquipment {
  shipmentEquipmentId     Int            @id @default(autoincrement())
  shipmentEquipmentCuid   String?        @unique @default(cuid()) @db.VarChar(32)
  shipmentCuid            String?        @db.VarChar(255)
  shipments               Shipment?      @relation(fields: [shipmentCuid], references: [shipmentCuid]) //establish foreign key relationship between accounts and users
  equipmentTypeCuid       String?        @db.VarChar(255)
  equipmentTypes          EquipmentType? @relation(fields: [equipmentTypeCuid], references: [equipmentTypeCuid]) //establish foreign key relationship between accounts and users
  shipmentEquipmentActive Int?           @default(1) @db.TinyInt
}

model ShipmentLoad {
  shipmentLoadId           Int       @id @default(autoincrement())
  shipmentLoadCuid         String?   @unique @default(cuid()) @db.VarChar(32)
  shipmentCuid             String?   @db.VarChar(255)
  shipments                Shipment? @relation(fields: [shipmentCuid], references: [shipmentCuid]) //establish foreign key relationship between accounts and users
  //loadName                 String?   @db.VarChar(255)
  loadTypeCuid             String    @db.VarChar(32)
  quantity                 Int?
  length                   Decimal?  @db.Decimal(10, 2)
  width                    Decimal?  @db.Decimal(10, 2)
  height                   Decimal?  @db.Decimal(10, 2)
  totalWeight              Decimal?  @db.Decimal(10, 2)
  stackable                Int?      @db.TinyInt
  shipmentOrderCount       Int?
  shipmentLoadActive       Int?      @db.TinyInt
  createdByAccountUserCuid String?   @db.VarChar(32)
  updatedByAccountUserCuid String?   @db.VarChar(32)
  //addedbyaccountuseridfk AccountsUsers   @relation(fields: [createdByAccountUserCuid], references: [accountUserId])  //establish foreign key relationship between accounts and users
  //updatedbyaccountuseridfk AccountsUsers   @relation(fields: [updatedByAccountUserCuid], references: [accountUserId])  //establish foreign key relationship between accounts and users
  //accountsUsers          AccountUsers? @relation(fields: [accountUserId], references: [accountUserId])
  //accountUserId          Int?
  dateCreated              DateTime? @default(now())
  dateUpdated              DateTime? @updatedAt
  loadTypes                LoadType? @relation(fields: [loadTypeCuid], references: [loadTypeCuid])
}

model ShipmentRoute {
  shipmentRoutId           Int       @id @default(autoincrement())
  shipmentRouteCuid        String?   @unique @default(cuid()) @db.VarChar(32)
  shipmentCuid             String?   @db.VarChar(255)
  shipments                Shipment? @relation(fields: [shipmentCuid], references: [shipmentCuid]) //establish foreign key relationship between accounts and users
  originName               String    @db.VarChar(255)
  originPhone              String?   @db.VarChar(32)
  originAddress1           String?   @db.VarChar(255)
  originAddress2           String?   @db.VarChar(255)
  originCity               String?   @db.VarChar(255)
  originRegion             String?   @db.VarChar(255)
  originPostalCode         String?   @db.VarChar(32)
  originCountry            String?   @db.VarChar(128)
  originEmailAddress       String?   @db.VarChar(255)
  originContact            String?   @db.VarChar(255)
  destinationName          String    @db.VarChar(255)
  destinationPhone         String?   @db.VarChar(32)
  destinationAddress1      String?   @db.VarChar(255)
  destinationAddress2      String?   @db.VarChar(255)
  destinationCity          String?   @db.VarChar(255)
  destinationRegion        String?   @db.VarChar(255)
  destinationPostalCode    String?   @db.VarChar(32)
  destinationCountry       String?   @db.VarChar(128)
  destinationEmailAddress  String?   @db.VarChar(255)
  destinationContact       String?   @db.VarChar(255)
  dateStarted              DateTime?
  dateEnded                DateTime?
  shipmentRouteActive      Int?      @db.TinyInt
  createdByAccountUserCuid String?   @db.VarChar(32)
  updatedByAccountUserCuid String?   @db.VarChar(32)
  dateCreated              DateTime? @default(now())
  dateUpdated              DateTime? @updatedAt
}

model ShipmentLocation {
  shipmentLocationId       Int       @id @default(autoincrement())
  shipmentLocationCuid     String?   @unique @default(cuid()) @db.VarChar(32)
  shipmentCuid             String?   @db.VarChar(255)
  shipments                Shipment? @relation(fields: [shipmentCuid], references: [shipmentCuid]) //establish foreign key relationship between accounts and users
  locationType             String?   @db.Char(1)
  locationName             String    @db.VarChar(255)
  locationFullAddress      String?   @db.TinyText
  locationLongitude        String?   @db.VarChar(32)
  locationLatitude         String?   @db.VarChar(32)
  locationPhone            String?   @db.VarChar(32)
  locationAddress1         String?   @db.VarChar(255)
  locationAddress2         String?   @db.VarChar(255)
  locationCity             String?   @db.VarChar(255)
  locationRegion           String?   @db.VarChar(255)
  locationPostalCode       String?   @db.VarChar(32)
  locationCountry          String?   @db.VarChar(128)
  locationEmailAddress     String?   @db.VarChar(255)
  locationContact          String?   @db.VarChar(255)
  locationReference        String?   @db.VarChar(32)
  dateStart                String?   @db.VarChar(32)
  dateEnd                  String?   @db.VarChar(32)
  dateStart2               DateTime? @db.Date
  dateEnd2                 DateTime? @db.Date
  timeStart                String?   @db.VarChar(32)
  timeEnd                  String?   @db.VarChar(32)
  timeStart2               DateTime? @db.DateTime()
  timeEnd2                 DateTime? @db.DateTime()
  shipmentLocationActive   Int?      @db.TinyInt
  createdByAccountUserCuid String?   @db.VarChar(32)
  updatedByAccountUserCuid String?   @db.VarChar(32)
  dateCreated              DateTime? @default(now())
  dateUpdated              DateTime? @updatedAt
}

model LoadType {
  loadTypeId     Int            @id @default(autoincrement())
  loadTypeCuid   String?        @unique @default(cuid()) @db.VarChar(32)
  loadTypeName   String         @db.VarChar(128)
  loadTypeActive Int?           @default(1) @db.TinyInt
  shipmentLoads  ShipmentLoad[]
}

model EquipmentType {
  equipmentTypeId     Int                 @id @default(autoincrement())
  equipmentTypeCuid   String?             @unique @default(cuid()) @db.VarChar(32)
  equipmentTypeName   String              @db.VarChar(128)
  equipmentTypeActive Int?                @default(1) @db.TinyInt
  //shipments           Shipment[]
  shipmentEquipments  ShipmentEquipment[]
}

model User {
  userId     Int        @id @default(autoincrement())
  userCuid   String?    @unique @default(cuid()) @db.VarChar(32)
  userName   String     @db.VarChar(255)
  userEmail  String     @db.VarChar(255)
  userPhone  String?    @db.VarChar(128)
  userActive Int?       @default(1) @db.TinyInt
  UserRoles  UserRole[]
}

model Role {
  roleId     Int        @id @default(autoincrement())
  roleCuid   String?    @unique @default(cuid()) @db.VarChar(32)
  roleType   String     @default("C") @db.VarChar(8)
  roleName   String     @db.VarChar(128)
  roleActive Int?       @default(1) @db.TinyInt
  UserRoles  UserRole[]
}

model UserRole {
  userRoleId     Int    @id @default(autoincrement())
  userRoleCuid   String @unique @default(cuid()) @db.VarChar(32)
  userCuid       String @db.VarChar(32)
  users          User?  @relation(fields: [userCuid], references: [userCuid]) //establish foreign key relationship between accounts and users
  roleCuid       String @db.VarChar(32)
  roles          Role?  @relation(fields: [roleCuid], references: [roleCuid]) //establish foreign key relationship between accounts and users
  userRoleActive Int?   @default(1) @db.TinyInt
}

model Accessorial {
  accessorialId        Int                   @id @default(autoincrement())
  accessorialCuid      String?               @unique @default(cuid()) @db.VarChar(32)
  accessorialName      String                @db.VarChar(128)
  accessorialActive    Int?                  @default(1) @db.TinyInt
  shipmentAccessorials ShipmentAccessorial[]
}
